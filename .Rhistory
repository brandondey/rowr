}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return(vert(result))
}
class(rowApply(list(1,2,3),force))
rowApply(list(1,2,3),force)
rowApply(df,force)
list(1,2,3)
rowApply(list(1,2,3),sum)
rowApply(list(1,2,3),force
)
rowApply(list(1,2,3),class)
rowApply(list(1,2,3),dim)
rowApply(list(1,2,3),sum)
rows <- function(data,rownums)
{
#result<-data[rownums]
if(is.null(dim(data)))
{
result<-data[rownums]
}
else
{
result<-data[rownums,]
}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return(cbind.fill(result))
}
rowApply(list(1,2,3),sum)
rowApply(df,sum)
rowApply(df,force)
rowApply(df,function (x) x$a)
df
rows <- function(data,rownums)
{
#result<-data[rownums]
if(is.null(dim(data)))
{
result<-data[rownums]
}
else
{
result<-data[rownums,]
}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return(buffer(result))
}
rowApply(df,function (x) x$a)
rowApply(list(1,2,3),sum)
rows <- function(data,rownums)
{
#result<-data[rownums]
if(is.null(dim(data)))
{
result<-data[rownums]
}
else
{
result<-data[rownums,]
}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return(cbind.fill(result))
}
cbind.fill(df)
rows(df,1)
class(rows(df,1))
dim(rows(df,1))
dim(df)
rows <- function(data,rownums)
{
#result<-data[rownums]
if(is.null(dim(data)))
{
result<-data[rownums]
}
else
{
result<-data[rownums,]
}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return((result))
}
class(rows(df,1))
rows(df,1)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
cbind.fill(df)
rollApply <- function(data,fun,window=len(data),minimum=1,align='left')
{
if(minimum>len(data))
return()
FUN=match.fun(fun)
if (align=='left')
result<-sapply(1:(len(data)-minimum+1),function (x) FUN(rows(data,x:(min(len(data),(x+window-1))))))
if (align=='right')
result<-sapply(minimum:len(data),function (x) FUN(rows(data,max(1,x-window+1):x)))
return(result)
}
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x[[2]]),window=3,align='right'))
rollApply(list(1,2,3,4,5,6,7,8,9),sum,window=2,minimum=2)
as.data.frame(list(1,2,3))
rows(df,1)
class(rows(df,1))
rows(list(1,2,3),2)
rows(list(1,2,3),c(2,3))
sum(list(1,2,3))
max(list(1,2,3))
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
unlist()
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
rollApply(c(1,2,3),sum)
rollApply(c(1,2,3,4,5,6,7,8,9),sum)
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x[[2]]),window=3,align='right'))
rowApply(df,force)
rowApply(df,function (x) sum(unlist(x)))
rowApply(list(1,2,3),function (x) sum(unlist(x)))
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
library(microbenchmark)
install.packages('microbenchmark')
library(microbenchmark)
library("ggplot2")
tm <- microbenchmark(rchisq(100, 0),
rchisq(100, 1),
rchisq(100, 2),
rchisq(100, 3),
rchisq(100, 5), times=1000L)
autoplot(tm)
microbenchmark(NULL, f(), times=1000L)
microbenchmark(NULL, sum, times=1000L)
microbenchmark(NULL, 1+1, times=1000L)
microbenchmark(1+1,times=1000)
microbenchmark(1+1,times=1000L)
example(microbenchmark)
library(benchmark)
library(rbenchmark)
install.packages(rbenchmark)
install.packages('rbenchmark')
library(rbenchmark)
R.version()
R.Version()
library(rbenchmark)
benchmark(1+1)
microbenchmark(1+1)
benchmark(rowApply(df,sum))
benchmark(apply(df,MARGIN=1,sum))
benchmark(apply(df,MARGIN=1,sum),replications=1000)
benchmark(rowApply(df,sum),replications=1000)
ts
datasets
datasets()
?datasets
library(help = "datasets")
airmiles
rollApply(airmiles,sum)
??rollapply
vectorize(`+`)(c(1,2,3))
vectorize(sum)(c(1,2,3),c(1,2,3))
# Compare these results to Vectorize, which does not vectorize sum at all.
Vectorize(sum)(c(1,2,3),c(1,2,3))
# Across data frame columns.
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
vectorize(sum)(df$a,df$b)
# Once again, Vectorize gives a different result
Vectorize(sum)(df$a,df$b)
# Any combination of vectors, lists, matrices, or data frames an be used.
vectorize(`+`)(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
rollApply(1:100,sum,minimum=2,window=2)
rollApply(c(1,2,3),sum)
##6 5 3
rollApply(c(1,2,3,4,5,6,7,8,9),sum)
##45 44 42 39 35 30 24 17  9
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
##3  5  7  9 11 13 15 17  9
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
##3  5  7  9 11 13 15 17
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
EuStockMarkets
coalesce(EuStockMarkets)
cbind(EuStockMarkets,coalesce(EuStockMarkets,function (x,y) if (x>y) x else y))
cbind(EuStockMarkets,coalesce(EuStockMarkets,fun=function (x,y) if (x>y) x else y))
cbind(EuStockMarkets,Max=coalesce(EuStockMarkets,fun=function (x,y) if (x>y) x else y))
cbind(EuStockMarkets,Max=coalesce(EuStockMarkets,fun=function (x,y) if (x>y) x else y))[1:5,]
cbind(EuStockMarkets,Max=vectorize(function (x,y) if (x>y) x else y)(EuStockMarkets[1:5,]))
cbind(EuStockMarkets[1:5,],Max=vectorize(function (x,y) if (x>y) x else y)(EuStockMarkets[1:5,]))
?rowr
??rowr
?apply
?lapply
?rollapply
??rollapply
airmiles
rowApply(airmiles,force)
rowApply(airmiles,sum)
rowApply<-function(data,fun,...)
{
sapply(1:len(data),function (x) fun(rows(data,x),...))
}
rowApply(airmiles,sum)
library(RProf)
??RProf
Rprof
library(profr)
test<-profr(rowApply(1:1000,sum))
test
test<-profr(rowApply(1:100000,sum))
test
test<-profr(cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right')))
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
profr(cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right')))
test<-profr(rollApply(1:10000,sum,minimum=2,window=2))
test
test<-profr(rollApply(1:100000,sum,minimum=5,window=5))
test
library(rowr)
?rowr
??rollapply
library(rowr)
?rowr
rollApply(1:100,sum,minimum=2,window=2)
rollApply(c(1,2,3),sum)
##6 5 3
rollApply(c(1,2,3,4,5,6,7,8,9),sum)
##45 44 42 39 35 30 24 17  9
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
##3  5  7  9 11 13 15 17  9
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
##3  5  7  9 11 13 15 17
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
rowApply(list(1,2,3),function (x) sum(unlist(x)))
rowApply(df,sum)
rowApply(list(1,2,3),function (x) sum(unlist(x)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
rowApply(df,sum)
rowApply(list(1,2,3),function (x) sum(unlist(x)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
rowApply(df,sum)
rollApply(1:100,sum,minimum=2,window=2)
rollApply(c(1,2,3),sum)
##6 5 3
rollApply(c(1,2,3,4,5,6,7,8,9),sum)
##45 44 42 39 35 30 24 17  9
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
##3  5  7  9 11 13 15 17  9
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
##3  5  7  9 11 13 15 17
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
rollApply <- function(data,fun,window=len(data),minimum=1,align='left',...)
{
if(minimum>len(data))
return()
FUN=match.fun(fun)
if (align=='left')
result<-sapply(1:(len(data)-minimum+1),function (x) FUN(rows(data,x:(min(len(data),(x+window-1)))),...))
if (align=='right')
result<-sapply(minimum:len(data),function (x) FUN(rows(data,max(1,x-window+1):x),...))
return(result)
}
rollApply(1:100,sum,minimum=2,window=2)
rollApply(c(1,2,3),sum)
##6 5 3
rollApply(c(1,2,3,4,5,6,7,8,9),sum)
##45 44 42 39 35 30 24 17  9
rollApply(c(1,2,3,4,5,6,7,8,9),sum,window=2)
##3  5  7  9 11 13 15 17  9
rollApply(list(1,2,3,4,5,6,7,8,9),function(x) sum(unlist(x)),window=2,minimum=2)
##3  5  7  9 11 13 15 17
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
df1<-data.frame(a=c(1,2,3),b=c(1,2,3),c=c(1,2,3))
insertRows(df1,data.frame(c('a','a','a')),5)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),1)
library(rowr)
df1<-data.frame(a=c(1,2,3),b=c(1,2,3),c=c(1,2,3))
insertRows(df1,data.frame(c('a','a','a')),5)
insertRows(df1,data.frame(c('a','a','a')),4)
insertRows(df1,data.frame(c('a','a','a')),3)
insertRows(df1,data.frame(c('a','a','a')),2)
insertRows(df1,data.frame(c('a','a','a')),1)
data.frame(c('a','a','a'))
data.frame(list('a','a','a'))
df1<-data.frame(a=c(1,2,3),b=c(1,2,3),c=c(1,2,3))
insertRows(df1,data.frame(list('a','a','a')),5)
insertRows(df1,data.frame(list('a','a','a')),4)
insertRows(df1,data.frame(list('a','a','a')),3)
insertRows(df1,data.frame(list('a','a','a')),2)
insertRows(df1,data.frame(list('a','a','a')),1)
insertRows(df1,df1,3)
cbind(women,Rolling3=rollApply(women,fun=function(x) mean(x$weight),window=3,align='right'))
install.packages("roxygen2")
library(rowr)
library(rowr)
library(rowr)
library(rowr)
buffer
library(rowr)
buffer
buffer
buffer
library(rowr)
buffer
buffer(rbind(1:2))
cbind.fill(rbind(1:2),rbind(1:2))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
vert
buffer(list(1,2,3))
as.data.frame(cbind(as.matrix(list(1,2,3))))
cbind.data.frame(list(1,2,3))
lapply(inputs,buffer,length.out=maxlength,NULL,preserveClass=FALSE)
lapply(list(1,2,3),buffer,length.out=maxlength,NULL,preserveClass=FALSE)
lapply(list(1,2,3),buffer,length.out=len(list(1,2,3)),NULL,preserveClass=FALSE)
as.data.frame(cbind(as.matrix(df)))
df
library(rowr)
buffer(rbind(1:2))
list(list(1,2,3))
lapply(list(list(1,2,3)),force)
list(list(1,2,3))[[1]]
list(list(1,2,3))[[0]]
list(list(1,2,3))[[2]]
lapply(list(1,2,3),class)
library(rowr)
buffer(rbind(1:2))
library(rowr)
buffer(rbind(1:2))
simplify2array(rbind(1:2))
simplify2array(list)
simplify2array(list(1,2,3))
as.list(simplify2array(list(1,2,3)))
lapply(list(list(1,2,3)),simplify2array)
lapply(list(1,2,3)),simplify2array)
lapply(list(1,2,3),simplify2array)
lapply(list(1,2,3),vert)
lapply(list(1,2,3),cbind)
lapply(list(1,2,3),function (x) as.data.frame(cbind(as.matrix(x))))
library(rowr)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
library(rowr)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
library(rowr)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
cbind.fill(list(1,2,3))
lapply(list(list(1,2,3)),buffer)
lapply(list(list(1,2,3)),cbind)
lapply(list(list(1,2,3)),cbind.fill)
library(rowr)
lapply(list(list(1,2,3)),cbind.fill)
lapply(list(list(1,2,3)),cbind)
lapply(list(list(1,2,3)),buffer)
lapply(list((1,2,3)),buffer)
lapply(list(1,2,3),buffer)
lapply(list(list(1,2,3),rbind(1:2)),buffer)
buffer
cbind.fill(list(1,2,3))
library(rowr)
cbind.fill(list(1,2,3))
library(rowr)
cbind.fill(list(1,2,3))
cbind.fill
buffer
lapply(list(1,2,3),function (x) as.data.frame(cbind(as.matrix(x))))
lapply(list(list(1,2,3)),function (x) as.data.frame(cbind(as.matrix(x))))
lapply(list(list(1,2,3),rbind(1:2)),function (x) as.data.frame(cbind(as.matrix(x))))
cbind.fill(list(1,2,3),rbind(1:2))
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
buffer
cbind.fill
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
input
inputs
inputs
maxlength
bufferedInputs
cbind.fill(list(1,2,3),rbind(1:2))
input
x
x
input
results
as.data.frame(lapply(input,rep,length.out=length.out))
as.data.frame(sapply(input,rep,length.out=length.out))
class(input)
lapply(input,class)
lapply(input,rep)
as.matrix(list(1,2,3))
str(as.matrix(list(1,2,3)))
c(1,2,3)
as.matrix(c(1,2,3))
str(as.matrix(c(1,2,3)))
str(matrix(list(1,2,3)))
[list(1,2,3)]
[[list(1,2,3)]]
cbind.fill(list(1,2,3),rbind(1:2))
results
str(input)
str(matrix(input))
str(c(input))
lapply(input,unlist)
lapply(cbind(input,input),unlist)
as.data.frame(lapply(cbind(input,input),unlist))
cbind.fill(list(1,2,3),rbind(1:2))
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
input
results
x
x
library(rowr)
cbind.fill(list(1,2,3),rbind(1:2))
input
inputs
str(x)
str(input)
str(input)
results
cbind.fill(list(1,2,3),rbind(1:2))
cbind.fill(rbind(1:2))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
buffer(list(1,2,3),20)
x
input
input
buffer(list(1,2,3),20)
str(input)
input
str(input)
buffer(list(1,2,3),20)
input
x
vert(x)
lapply(vert(x),class)
lapply(vert(x),unlist)
input
library(rowr)
buffer(list(1,2,3),20)
x
input
results
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
buffer(rbind(1:2))
cbind.fill(rbind(1:2),rbind(1:2))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
cbind.fill(rbind(1:2),rbind(3:4))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-lapply(vert(x),unlist)
results<-as.data.frame(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
library(rowr)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
cbind.fill(rbind(1:2),rbind(3:4))
df<-data.frame(a=c(1,2,3),b=c(1,2,3))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(a=c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
library(rowr)
