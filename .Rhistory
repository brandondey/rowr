buffer(list(1,2,3),20,preserveClass=FALSE)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5,preserveClass=FALSE)
buffer((factor(x=c('Hello'))),5,preserveClass=FALSE)
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
buffer(list(1,2,3),20,preserveClass=FALSE)
as.matrix(buffer(list(1,2,3),20,preserveClass=FALSE))
as.factor(as.matrix(buffer(list(1,2,3),20,preserveClass=FALSE)))
as.numeric(buffer(list(1,2,3),20,preserveClass=FALSE))
buffer(c(1,2,3),20)
as(buffer(list(1,2,3),20,preserveClass=FALSE),'numeric')
as(buffer(c(1,2,3),20,preserveClass=FALSE),'numeric')
as(buffer(c('a','b','c'),20,preserveClass=FALSE),'numeric')
as.numeric(buffer(c('a','b','c'),20,preserveClass=FALSE))
as.string(buffer(c('a','b','c'),20,preserveClass=FALSE))
as.character(buffer(c('a','b','c'),20,preserveClass=FALSE))
buffer(c('a','b','c'),20,preserveClass=FALSE)
as.character(buffer(c('a','b','c'),20,preserveClass=FALSE))
as.vector(buffer(c('a','b','c'),20,preserveClass=FALSE))
class(as.vector(buffer(c('a','b','c'),20,preserveClass=FALSE)))
class(buffer(c('a','b','c'),20,preserveClass=FALSE))
as2<-function(object,class)
{
if(class=='factor')
return(as.factor(object))
if(class=='data.frame')
return(as.data.frame(object))
else
return(as(object,class))
}
buffer(c('a','b','c'),20,preserveClass=TRUE)
buffer(as.matrix(c('a','b','c')),20,preserveClass=TRUE)
buffer(c('a','b','c'),20,preserveClass=FALSE)
buffer(df,20,preserveClass=FALSE)
buffer(c(1,2,3),20,preserveClass=FALSE)
as.numeric(buffer(c(1,2,3),20,preserveClass=FALSE))
as.numeric(as.matrix(buffer(c(1,2,3),20,preserveClass=FALSE)))
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.data.frame(as.matrix(x))
results<-as.data.frame(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
results<-as.matrix(results)
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
#' Row-based functions for R objects.
#'
#' Rowr allows the manipulation of R objects as if they were organized rows in a
#' way that is familiar to people used to working with databases.  It allows
#' more consistent and predictable output to common functions, and generalizes a
#' number of utility functions to to be failsafe with any number of objects.
#' @name rowr
#' @docType package
NULL
#' Vectorize a scalar function to work on any R object.
#'
#' Robust alternative to \code{\link{Vectorize}} function that accepts any function with two
#' or more arguments.  Returns a function that will work an arbitrary number of vectors, lists or
#' data frames, though output may be unpredicatable in unusual applications.  The
#' results are also intended to be more intuitive than Vectorize.
#'
#' @param fun a two or more argument function
#' @param type like \code{MARGIN} in \code{\link{apply}}, except that \code{c(1,2)} is
#'   represented as a \code{3} instead.  By default, will \code{Reduce} single dimensional
#'   data handle everything else row-wise.
#' @export
#' @examples
#' vectorize(`+`)(c(1,2,3))
#' vectorize(sum)(c(1,2,3),c(1,2,3))
#' # Compare these results to Vectorize, which does not vectorize sum at all.
#' Vectorize(sum)(c(1,2,3),c(1,2,3))
#' # Across data frame columns.
#' df<-data.frame(a=c(1,2,3),b=c(1,2,3))
#' vectorize(sum)(df$a,df$b)
#' # Once again, Vectorize gives a different result
#' Vectorize(sum)(df$a,df$b)
#' # Any combination of vectors, lists, matrices, or data frames an be used.
#' vectorize(`+`)(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
vectorize<-function(fun,type=NULL)
{
function(...)
{
cols<-cbind.fill(...)
if(is.null(type))
if(dim(cols)[2]<2)
type=2
else
type=1
if(type==3)
margin=c(1,2)
else
margin=type
if(type %in% c(1,2,3))
apply(cols,margin,function (x) Reduce(fun,unlist(x)))
else
Reduce(fun,unlist(cols))
}
}
#'Pads an object to a desired length, either with replicates of itself or another repeated object.
#'
#'@param x an R object
#'@param length.out the desired length of the final output
#'@param fill R object to fill empty rows in columns below the max size.  If unspecified, repeats input rows in the same way as \code{cbind}.
#'@param preserveClass determines whether to return an object of the same class as the original argument.  Otherwise, returns a matrix.
#'@export
#'@examples
#'buffer(c(1,2,3),20)
#'buffer(matrix(c(1,2,3,4),nrow=2),20)
#'buffer(list(1,2,3),20)
#'df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
#'buffer(df,5)
#'buffer((factor(x=c('Hello'))),5)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.data.frame(as.matrix(x))
results<-as.data.frame(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
#' Combine arbitrary data types, filling in missing rows.
#'
#' Robust alternative to \code{\link{cbind}} that fills missing values and works
#' on arbitrary data types.  Combines any number of R objects into a single matrix, with each input
#' corresponding to the greater of 1 or ncol.  \code{cbind} has counterintuitive
#' results when working with lists, cannot handle certain inputs of differing
#' length, and does not allow the fill to be specified.
#'
#' @param ... any number of R data objects
#' @param fill R object to fill empty rows in columns below the max size.  If unspecified, repeats input rows in the same way as \code{cbind}. Passed to \code{\link{buffer}}.
#' @export
#' @examples
#' cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
#' cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
#' cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
cbind.fill<-function(...,fill=NULL)
{
inputs<-list(...)
maxlength<-max(unlist(lapply(inputs,len)))
bufferedInputs<-lapply(inputs,buffer,length.out=maxlength,fill,preserveClass=FALSE)
return(Reduce(cbind,bufferedInputs))
}
#'Allows row indexing without knowledge of dimensionality or class.
#'
#'@param data any \code{R} object
#'@param rownums indices of target rows
#'@export
#'@examples
#'rows(c('A','B','C'),c(1,3))
#'rows(list('A','B','C'),c(1,3))
#'df<-data.frame(a=c(1,2,3),b=c(1,2,3))
#'rows(df,3)
rows <- function(data,rownums)
{
#result<-data[rownums]
if(is.null(dim(data)))
{
result<-data[rownums]
}
else
{
result<-data[rownums,]
}
#result<-ifelse(is.null(dim(data)),data[c(rownums)],data[c(rownums),])
return(result)
}
#'Allows finding the 'length' without knowledge of dimensionality.
#'
#'@param data any \code{R} object
#'@export
#'@examples
#'len(list(1,2,3))
#'len(c(1,2,3,4))
#'df<-data.frame(a=c(1,2,3),b=c(1,2,3))
#'len(df)
len <- function(data)
{
result<-ifelse(is.null(nrow(data)),length(data),nrow(data))
return(result)
}
#' A more versatile form of the T-SQL \code{coalesce()} function.
#'
#' Little more than a wrapper for \code{\link{vectorize}}, allows for duplication of SQL coalesce functionality, certain types of if-else statements, and \code{\link{apply}}/\code{\link{Reduce}} combinations.
#'
#' @param ... an arbitrary number of \code{R} objects
#' @param fun a two argument function that returns an atomic value
#' @export
#' @examples
#' coalesce(c(NA,1,2))
#' coalesce(c(NA,1,2),c(3,4,NA))
#' df<-data.frame(a=c(NA,2,3),b=c(1,2,NA))
#' coalesce(df$a,df$b)
#' # Or even just:
#' coalesce(df)
coalesce<-function(...,fun=(function (x,y) if(!is.na(x)) x else y))
{
FUN=match.fun(fun)
vectorize(FUN)(...)
}
#'A more versatile form of the T-SQL \code{count()} function.
#'
#'Implementation of T-SQL \code{count} and Excel \code{COUNTIF} functions.  Shows the total number of elements in any number of data objects altogether or that match a condition.
#'
#'@param ... an arbitrary number of \code{R} objects
#'@param condition a 1 argument condition
#'@export
#'@examples
#'count(c(NA,1,2))
#'count(c(NA,1,2),is.na)
#'count(c(NA,1,2),list('A',4),cbind(1,2,3))
#'count(c(NA,1,2),list('A',4),cbind(1,2,3),condition=is.character)
count<-function(...,condition=(function (x) TRUE))
{
data<-c(...)
result<-sum(sapply(data, function (x) if(condition(x)) 1 else 0))
return(result)
}
as2<-function(object,class)
{
object<-as.matrix(object)
if(class=='factor')
return(as.factor(object))
if(class=='data.frame')
return(as.data.frame(object))
else
return(as(object,class))
}
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
list(1,2,3)
as.matrix(list(1,2,3))
as.list(as.matrix(list(1,2,3)))
buffer(list(1,2,3),preserveClass=FALSE)
buffer(list(1,2,3),3,preserveClass=FALSE)
buffer(list(1,2,3),4,preserveClass=FALSE)
buffer(list(1,2,3),5,preserveClass=FALSE)
cbind.data.frame(list(1,2,3))
cbind(list(1,2,3))
as2(c(1,2,3),'factor')
as2(c(1,2,3),'data.frame')
as2(c(1,2,3),'matrix')
as2(c(1,2,3),'numeric')
as2(c(1,2,3),'character')
as2(c(1,2,3),'list')
buffer(list(1,2,3),4)
buffer(list(1,2,3),4,preserveClass=FALSE)
as2(list(1,2,3),'factor')
as.factor(as.matrix(list(1,2,3)))
as.matrix(list(1,2,3))
class(as.matrix(list(1,2,3)))
factor(as.matrix(list(1,2,3)))
as.factor(as.matrix(list(1,2,3)))
as2<-function(object,class)
{
object<-as.matrix(object)
if(class=='factor')
return(as.factor(object[[1]]))
if(class=='data.frame')
return(as.data.frame(object))
else
return(as(object,class))
}
as.factor(as.matrix(list(1,2,3)))
as.factor(as.matrix(list(1,2,3))[[1]])
as.factor(as.matrix(list(1,2,3))[1])
as.matrix(list(1,2,3))
as.matrix(list(1,2,3))[1]
as.matrix(list(1,2,3))[[1]]
as2<-function(object,class)
{
object<-as.matrix(object)
if(class=='factor')
return(as.factor(object))
if(class=='data.frame')
return(as.data.frame(object))
else
return(as(object,class))
}
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
as2(c(1,2,3),'list')
as.matrix(c(1,2,3))
str(as.matrix(c(1,2,3)))
str(as.matrix(list(1,2,3)))
as.matrix(list(1,2,3))
str(as.matrix(list(1,2,3)))
matrix(list(1,2,3))
class(matrix(list(1,2,3)))
str(matrix(list(1,2,3)))
as.matrix(list(1,2,3)))
as.matrix(list(1,2,3))
as.numeric(as.matrix(list(1,2,3)))
as(as.matrix(list(1,2,3)),'numeric')
as2(list(1,2,3),'numeric')
as2(list(1,2,3),'factor')
as2(list(1,2,3),'numeric')
as2(list(1,2,3),'character')
as.factor(as2(list(1,2,3),'character'))
as2<-function(object,class)
{
object<-as.matrix(object)
if(class=='factor')
return(as.factor(as.character(object)))
if(class=='data.frame')
return(as.data.frame(object))
else
return(as(object,class))
}
as(as.matrix(list(1,2,3)),'factor')
as2(as.matrix(list(1,2,3)),'factor')
as2(as.matrix(df),'factor')
df
buffer(list(1,2,3),preserveClass=FALSE)
as.list(buffer(list(1,2,3),preserveClass=FALSE))
as.list(buffer(list(1,2,3),4,preserveClass=FALSE))
buffer(list(1,2,3),4,preserveClass=FALSE)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.data.frame(as.matrix(x))
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(list(1,2,3),4,preserveClass=FALSE)
buffer(list(1,2,3),4,preserveClass=TRUE)
as.matrix(list(1,2,3))
cbind.data.frame(list(1,2,3))
lapply(as.matrix(list(1,2,3)),force)
as.matrix(lapply(as.matrix(list(1,2,3)),force))
t(as.matrix(lapply(as.matrix(list(1,2,3)),force)))
t(t(as.matrix(lapply(as.matrix(list(1,2,3)),force))))
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.matrix(x)
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
matrix(c(1,2,3))
lapply(matrix(c(1,2,3)),force)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.matrix(x)
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
results<-as.matrix(results)
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(c(1,2,3),20)
buffer(matrix(c(1,2,3,4),nrow=2),20)
buffer(list(1,2,3),20)
df<-data.frame(as.factor(c('Hello','Goodbye')),c(1,2))
buffer(df,5)
buffer((factor(x=c('Hello'))),5)
as.matrix(list(1,2,3))
cbind(as.matrix(list(1,2,3)))
str(cbind(as.matrix(list(1,2,3))))
str(cbind.data.frame(as.matrix(list(1,2,3))))
cbind.fill<-function(...,fill=NULL)
{
inputs<-list(...)
maxlength<-max(unlist(lapply(inputs,len)))
bufferedInputs<-lapply(inputs,buffer,length.out=maxlength,fill,preserveClass=FALSE)
return(Reduce(cbind.data.frame,bufferedInputs))
}
cbind.fill(c(1,2,3),list(1,2,3),cbind(c(1,2,3)))
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df)
cbind.fill(c(1,2,3),list(1,2,3),cbind(c('a','b')),'a',df,fill=NA)
buffer(list(1,2,3),4)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.matrix(x)
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(list(1,2,3),4)
lapply(as.matrix(list(1,2,3)),force)
lapply(c(1,2,3),force)
lapply(as.matrix(c(1,2,3)),force)
lapply(as.data.frame(c(1,2,3)),force)
list(1,2,3)
as.matrix(list(1,2,3))
c(1,2,3)
as.matrix(c(1,2,3))
as.factor(as.matrix(c(1,2,3)))
as.factor(as.matrix(list(1,2,3)))
str(as.matrix(c(1,2,3)))
str(as.matrix(list(1,2,3)))
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.matrix(x)
results<-as.data.frame(as.matrix(lapply(input,rep,length.out=length.out)))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(list(1,2,3),4)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-as.data.frame(as.matrix(x))
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(list(1,2,3),4)
buffer<-function(x,length.out=len(x),fill=NULL,preserveClass=TRUE)
{
xclass<-class(x)
input<-cbind(as.matrix(x))
results<-as.matrix(lapply(input,rep,length.out=length.out))
if(length.out>len(x) && !is.null(fill))
{
results<-t(results)
results[(length(unlist(x))+1):length(unlist(results))]<-fill
results<-t(results)
}
if(preserveClass)
results<-as2(results,xclass)
return(results)
}
buffer(list(1,2,3),4)
cbind(as.matrix(list(1,2,3)))
str(cbind(as.matrix(list(1,2,3))))
as.list(cbind(as.matrix(list(1,2,3))))
